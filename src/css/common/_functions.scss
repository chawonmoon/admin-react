// Bootstrap functions
//
// variables, maps, mixins 전반에 걸친 소스 코드를 평가하기 위한 Utility mixin 과 functions.

// Ascending (오름차순)
// grid breakpoints와 같은 Sass 맵을 평가하는 데 사용.
@mixin _assert-ascending($map, $map-name) {
  $prev-key: null;
  $prev-num: null;
  @each $key, $num in $map {
    @if $prev-num == null or unit($num) == "%" {
      // Do nothing
    } @else if not comparable($prev-num, $num) {
      @warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    } @else if $prev-num >= $num {
      @warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    }
    $prev-key: $key;
    $prev-num: $num;
  }
}

// Starts at zero
// 가장 낮은 중단 점의 `min-width`가 0에서 시작하는지 확인하는 데 사용됩니다.
@mixin _assert-starts-at-zero($map, $map-name: "$grid-breakpoints") {
  $values: map-values($map);
  $first-value: nth($values, 1);
  @if $first-value != 0 {
    @warn "First breakpoint in #{$map-name} must start at 0, but starts at #{$first-value}.";
  }
}

// String replace (문자열 치환 함수)
// `$string`에서`$search`를`$ replace`로 대체
// 사용자 정의 양식의 SVG 아이콘 배경에 사용됩니다.
//
// @author Hugo Giraudel
// @param {String} $string - 대상 문자열
// @param {String} $search - 대체 할 대상 문자열
// @param {String} $replace ('') - 대체 될 문자
// @return {String} - 업데이트 된 문자열
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(
        str-slice($string, $index + str-length($search)),
        $search,
        $replace
      );
  }

  @return $string;
}

// Color contrast (색상 대비)
@function color-yiq($color, $dark: $yiq-text-dark, $light: $yiq-text-light) {
  $r: red($color);
  $g: green($color);
  $b: blue($color);

  $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;

  @if ($yiq >= $yiq-contrasted-threshold) {
    @return $dark;
  } @else {
    @return $light;
  }
}

// 색상 검색 함수
@function color($key: "blue") {
  @return map-get($colors, $key);
}

@function theme-color($key: "primary") {
  @return map-get($theme-colors, $key);
}

@function gray($key: "100") {
  @return map-get($grays, $key);
}

// 테마 색 수준 요청
@function theme-color-level($color-name: "primary", $level: 0) {
  $color: theme-color($color-name);
  $color-base: if($level > 0, $black, $white);
  $level: abs($level);

  @return mix($color-base, $color, $level * $theme-color-interval);
}

// PX/PT to rem
@function rem($size) {
  $base-unit: unit($font-size-base);
  $static-size: null;
  @if $base-unit == "pt" {
    $static-size: (deUnit($font-size-base) * (16/12)) * 1px;
  } @else if $base-unit == "rem" {
    $static-size: (deUnit($font-size-base) * 16) * 1px;
  } @else if $base-unit == "px" {
    $static-size: $font-size-base;
  } @else {
    @error "상대 크기 단위 `#{unit($font-size-base)}`가 사용되었습니다. 고정 크기 단위(px/pt/rem)만 사용해야 합니다.";
  }

  $unit: unit($size);
  @if $unit == "px" {
    @return $size / $static-size#{rem};
  } @else if $unit == "pt" {
    @return $size(16/12) #{rem} / $static-size#{rem};
  } @else if $unit == "rem" {
    @return $size;
  } @else {
    @error "상대 크기 단위 `#{unit($size)}`가 사용되었습니다. 고정 크기 단위(px/pt/rem)만 사용해야 합니다.";
  }
}

// 단위 제거 함수
@function deUnit($value) {
  @return ($value / ($value * 0 + 1));
}

// PX → REM 함수
@function PX2REM($px, $base: 16) {
  @return (deUnit($px) / $base) * 1rem;
}

// REM → PX 함수
@function REM2PX($rem, $base: 16) {
  @return (deUnit($rem) * $base) * 1px;
}

// REM 단축 함수
@function toREM($px, $base: 16) {
  @return PX2REM(deUnit($px), $base);
}

// PX → EM 함수
@function PX2EM($px, $base: 16) {
  @return (deUnit($px) / $base) * 1em;
}

// EM → PX 함수
@function EM2PX($px, $base: 16) {
  @return (deUnit($px) * $base) * 1px;
}
